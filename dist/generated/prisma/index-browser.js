
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UtilisateurScalarFieldEnum = {
  id: 'id',
  email: 'email',
  motDePasse: 'motDePasse',
  prenom: 'prenom',
  nom: 'nom',
  role: 'role',
  entrepriseId: 'entrepriseId',
  estActif: 'estActif',
  creeLe: 'creeLe',
  misAJourLe: 'misAJourLe'
};

exports.Prisma.EntrepriseScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  logo: 'logo',
  adresse: 'adresse',
  devise: 'devise',
  typePeriodePaie: 'typePeriodePaie',
  creeLe: 'creeLe',
  misAJourLe: 'misAJourLe'
};

exports.Prisma.EmployeScalarFieldEnum = {
  id: 'id',
  prenom: 'prenom',
  nom: 'nom',
  poste: 'poste',
  typeContrat: 'typeContrat',
  taux: 'taux',
  compteBancaire: 'compteBancaire',
  nomBanque: 'nomBanque',
  entrepriseId: 'entrepriseId',
  estActif: 'estActif',
  creeLe: 'creeLe',
  misAJourLe: 'misAJourLe'
};

exports.Prisma.CyclePaieScalarFieldEnum = {
  id: 'id',
  nom: 'nom',
  dateDebut: 'dateDebut',
  dateFin: 'dateFin',
  statut: 'statut',
  entrepriseId: 'entrepriseId',
  creeLe: 'creeLe',
  misAJourLe: 'misAJourLe'
};

exports.Prisma.BulletinPaieScalarFieldEnum = {
  id: 'id',
  employeId: 'employeId',
  cyclePaieId: 'cyclePaieId',
  montantBrut: 'montantBrut',
  deductions: 'deductions',
  montantNet: 'montantNet',
  joursTravailles: 'joursTravailles',
  statut: 'statut',
  creeLe: 'creeLe',
  misAJourLe: 'misAJourLe'
};

exports.Prisma.PaiementScalarFieldEnum = {
  id: 'id',
  bulletinPaieId: 'bulletinPaieId',
  employeId: 'employeId',
  montant: 'montant',
  methode: 'methode',
  reference: 'reference',
  notes: 'notes',
  creeLe: 'creeLe',
  misAJourLe: 'misAJourLe'
};

exports.Prisma.PointageScalarFieldEnum = {
  id: 'id',
  employeId: 'employeId',
  date: 'date',
  heureArrivee: 'heureArrivee',
  heureDepart: 'heureDepart',
  isPresent: 'isPresent',
  heuresPrevues: 'heuresPrevues',
  heuresTravaillees: 'heuresTravaillees',
  creeLe: 'creeLe',
  misAJourLe: 'misAJourLe'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.UtilisateurOrderByRelevanceFieldEnum = {
  id: 'id',
  email: 'email',
  motDePasse: 'motDePasse',
  prenom: 'prenom',
  nom: 'nom',
  entrepriseId: 'entrepriseId'
};

exports.Prisma.EntrepriseOrderByRelevanceFieldEnum = {
  id: 'id',
  nom: 'nom',
  logo: 'logo',
  adresse: 'adresse',
  devise: 'devise'
};

exports.Prisma.EmployeOrderByRelevanceFieldEnum = {
  id: 'id',
  prenom: 'prenom',
  nom: 'nom',
  poste: 'poste',
  compteBancaire: 'compteBancaire',
  nomBanque: 'nomBanque',
  entrepriseId: 'entrepriseId'
};

exports.Prisma.CyclePaieOrderByRelevanceFieldEnum = {
  id: 'id',
  nom: 'nom',
  entrepriseId: 'entrepriseId'
};

exports.Prisma.BulletinPaieOrderByRelevanceFieldEnum = {
  id: 'id',
  employeId: 'employeId',
  cyclePaieId: 'cyclePaieId'
};

exports.Prisma.PaiementOrderByRelevanceFieldEnum = {
  id: 'id',
  bulletinPaieId: 'bulletinPaieId',
  employeId: 'employeId',
  reference: 'reference',
  notes: 'notes'
};

exports.Prisma.PointageOrderByRelevanceFieldEnum = {
  id: 'id',
  employeId: 'employeId'
};
exports.Role = exports.$Enums.Role = {
  SUPER_ADMINISTRATEUR: 'SUPER_ADMINISTRATEUR',
  ADMINISTRATEUR: 'ADMINISTRATEUR',
  CAISSIER: 'CAISSIER'
};

exports.PayPeriodType = exports.$Enums.PayPeriodType = {
  MENSUEL: 'MENSUEL',
  HEBDOMADAIRE: 'HEBDOMADAIRE',
  QUOTIDIEN: 'QUOTIDIEN'
};

exports.ContractType = exports.$Enums.ContractType = {
  TEMPS_PLEIN: 'TEMPS_PLEIN',
  TEMPS_PARTIEL: 'TEMPS_PARTIEL',
  CONTRAT: 'CONTRAT'
};

exports.PayRunStatus = exports.$Enums.PayRunStatus = {
  BROUILLON: 'BROUILLON',
  APPROUVE: 'APPROUVE',
  FERME: 'FERME'
};

exports.PayslipStatus = exports.$Enums.PayslipStatus = {
  BROUILLON: 'BROUILLON',
  APPROUVE: 'APPROUVE',
  PAYE: 'PAYE',
  PARTIEL: 'PARTIEL',
  EN_ATTENTE: 'EN_ATTENTE'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  ESPECES: 'ESPECES',
  VIREMENT: 'VIREMENT',
  MOBILE_MONEY: 'MOBILE_MONEY'
};

exports.Prisma.ModelName = {
  Utilisateur: 'Utilisateur',
  Entreprise: 'Entreprise',
  Employe: 'Employe',
  CyclePaie: 'CyclePaie',
  BulletinPaie: 'BulletinPaie',
  Paiement: 'Paiement',
  Pointage: 'Pointage'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
